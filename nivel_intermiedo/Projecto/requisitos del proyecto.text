# Proyecto Final â€“ Simulador de Biblioteca Digital
# ðŸ§  Objetivo:

# Crear un pequeÃ±o sistema para gestionar una biblioteca digital.
# Se deben poder agregar libros, ver informaciÃ³n, prestar libros, y
# controlar accesos y errores.

# ðŸ§± Requisitos (Â¡SÃ­ o sÃ­!):

# 1. âœ… Usar Clases
#     Debe haber al menos 2 clases principales: Libro y Biblioteca.
#     UsÃ¡ herencia si te parece Ãºtil (por ejemplo, si hacÃ©s una
#     clase ItemBiblioteca como base).

# 2. âœ… Encapsulamiento
#     Algunos atributos deben estar marcados como privados o protegidos
#     (_atributo, __atributo).
#     AccedÃ© a ellos usando @property y @setter con validaciÃ³n.
#     Ejemplo de atributo privado sugerido: __disponible, __prestado_a,
#     _cantidad_disponible.

# 3. âœ… Validaciones y manejo de errores
#     Si alguien intenta prestar un libro que no existe â†’ mostrar mensaje.
#     Si alguien pone un dato incorrecto (por ejemplo, una cantidad
#     negativa) â†’ manejarlo con try/except o validaciones.
#     TIP: UsÃ¡ isinstance(valor, int) para chequear tipos, y raise
#     ValueError("mensaje") para lanzar errores propios.

# 4. âœ… ComposiciÃ³n (opcional pero recomendado)
#     Que Biblioteca contenga una lista de objetos Libro.
#     Es decir, un libro no vive solo, vive dentro de la biblioteca.

# 5. âœ… Funciones que simulen acciones
#     agregar_libro(): agrega un nuevo libro
#     prestar_libro(nombre): marca el libro como prestado si estÃ¡
#     disponible.
#     mostrar_libros_disponibles(): lista todos los que se pueden prestar.
#     # TIP: PodÃ©s usar listas y bucles para recorrer los libros.
